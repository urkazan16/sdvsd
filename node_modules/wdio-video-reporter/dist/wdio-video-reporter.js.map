{"version":3,"file":"wdio-video-reporter.js","sources":["../src/config.js","../src/helpers.js","../src/assets/not-available.png","../src/index.js"],"sourcesContent":["export default {\n  debugMode: false,\n\n  logLevel: 'info',\n\n  videoRenderTimeout: 5,\n\n  outputDir: '_results_',\n  allureOutputDir: 'allure-results',\n\n  // Where to save screenshots\n  rawPath: 'rawSeleniumVideoGrabs',\n\n  // Should an allure report be updated with videos\n  // There is a bug, or just bad design really, where\n  // Allure is needed to make sure the videos have\n  // time to be saved before the process exits\n  usingAllure: false,\n\n  // Should all videos be saved, or only from failed tests\n  saveAllVideos: false,\n\n  // Video slowdown multiplier\n  videoSlowdownMultiplier: 3,\n\n  // Which commands should be excluded from screenshots\n  excludedActions: [\n\n  ],\n\n  // Which commands should result in a screenshot (without `/session/:sessionId/`)\n  // https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol\n  jsonWireActions: [\n    'url',\n    'forward',\n    'back',\n    'refresh',\n    'execute',\n    'size',\n    'position',\n    'maximize',\n    'click',\n    'submit',\n    'value',\n    'keys',\n    'clear',\n    'selected',\n    'enabled',\n    'displayed',\n    'orientation',\n    'alert_text',\n    'accept_alert',\n    'dismiss_alert',\n    'moveto',\n    'buttondown',\n    'buttonup',\n    'doubleclick',\n    'down',\n    'up',\n    'move',\n    'scroll',\n    'doubleclick',\n    'longclick',\n    'flick',\n    'location',\n  ],\n};\n","import fs from 'fs-extra';\n\nimport config from './config.js';\n\nlet writeLog;\nexport default {\n  sleep(ms) {\n    const stop = new Date().getTime();\n    while(new Date().getTime() < stop + ms);\n  },\n\n  setLogger(obj) {\n    writeLog = obj;\n  },\n\n  debugLog(msg) {\n    if (config.debugMode) {\n      writeLog(msg);\n    }\n  },\n\n  generateFilename(browserName, fullname) {\n    const date = new Date();\n    const msec = ('000' + date.getMilliseconds()).slice(-3);\n    const timestamp = date.toLocaleString('iso', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n    }).replace(/[ ]/g, '--').replace(/:|\\//g, '-') + `-${msec}`;\n\n    let filename = encodeURIComponent(\n      `${\n        fullname.replace(/\\s+/g, '-')\n      }--${browserName}--${timestamp}`\n    ).replace(/%../g, '')\n     .replace(/\\./g, '-')\n     .replace(/[/\\\\?%*:'|\"<>()]/g, '');\n\n    if (filename.length > 250) {\n      const truncLength = (250 - 2)/2;\n      filename = filename.slice(0, truncLength) + '--' + filename.slice(-truncLength);\n    }\n\n    return filename;\n  },\n\n  waitForVideos(videos) {\n    const existingVideos = [];\n    const maxWaiting = 10 * config.videoRenderTimeout;\n\n    writeLog(`Max waiting time: ${config.videoRenderTimeout}s\\n`);\n\n    for (let idx in videos) {\n      writeLog(`\\n--- Video ${videos[idx]} ---\\n`);\n      let waitForExistTimer = 0;\n      let waitForRenderTimer = 0;\n\n      do {\n        this.sleep(100);\n        if (waitForExistTimer % 10 === 0) {\n          writeLog('Waiting for video to exist: ' + waitForExistTimer/10 + 's\\n');\n        }\n      } while (!fs.existsSync(videos[idx]) && waitForExistTimer++ < maxWaiting);\n\n      if (waitForExistTimer < maxWaiting) {\n        let fileStats = fs.statSync(videos[idx]);\n        let lastSize = 0;\n        let videoIsReady = false;\n\n        do {\n          fileStats = fs.statSync(videos[idx]);\n          videoIsReady = fileStats.size > 48 && lastSize === fileStats.size;\n          lastSize = fileStats.size > 48 ? fileStats.size : 0;\n\n          this.sleep(100);\n          if (waitForRenderTimer % 10 === 0) {\n            writeLog('Waiting for video to be ready: ' + waitForRenderTimer/10 + 's\\n');\n          }\n        } while ((fileStats.size === 48 || !videoIsReady) && waitForRenderTimer++ < maxWaiting);\n\n        if (waitForRenderTimer < maxWaiting) {\n          existingVideos.push(videos[idx]);\n        }\n      }\n    }\n\n    return existingVideos;\n  },\n\n};\n","export default ''","import WdioReporter from '@wdio/reporter';\nimport allureReporter from '@wdio/allure-reporter';\nimport mkdirp from 'mkdirp';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { spawn } from 'child_process';\nimport { path as ffmpegPath} from '@ffmpeg-installer/ffmpeg';\n\nimport helpers from './helpers.js';\nimport config from './config.js';\nimport notAvailableImage from './assets/not-available.png';\n\nexport default class Video extends WdioReporter {\n  /**\n   * Set reporter options\n   */\n  constructor (options) {\n    super(options);\n\n    // User options\n    // Wdio doesn't pass outputDir, but logFile which includes outputDir\n    config.outputDir = options.logFile ? path.dirname(options.logFile) : config.outputDir;\n    if(config.outputDir.length > 1) {\n      config.outputDir = config.outputDir.replace(/[\\/|\\\\]$/, '');\n    }\n    config.saveAllVideos = options.saveAllVideos || config.saveAllVideos;\n    config.videoSlowdownMultiplier = options.videoSlowdownMultiplier || config.videoSlowdownMultiplier;\n    config.videoRenderTimeout = options.videoRenderTimeout || config.videoRenderTimeout;\n\n    // Debug\n    config.excludedActions.push(...(options.addExcludedActions || []));\n    config.jsonWireActions.push(...(options.addJsonWireActions || []));\n\n    this.videos = [];\n    this.ffmpegCommands = [];\n    this.testnameStructure = [];\n    this.testname = '';\n    this.frameNr = 0;\n    this.videos = [];\n    this.config = config;\n\n    helpers.setLogger(msg => this.write(msg));\n  }\n\n  /**\n   * Set wdio config options\n   */\n  onRunnerStart (browser) {\n    const allureConfig = browser.config.reporters.filter(r => r === 'allure' || r[0] === 'allure').pop();\n    if (allureConfig && allureConfig[1] && allureConfig[1].outputDir) {\n      config.allureOutputDir = path.resolve(allureConfig[1].outputDir);\n    }\n    config.usingAllure = !!allureConfig;\n    const logLevel = browser.config.logLevel;\n    config.debugMode = logLevel.toLowerCase() === 'trace' || logLevel.toLowerCase() === 'debug';\n    this.write('Using reporter config:' + JSON.stringify(browser.config.reporters, undefined, 2) + '\\n\\n');\n    this.write('Using config:' + JSON.stringify(config, undefined, 2) + '\\n\\n\\n');\n  }\n\n  /**\n   * Save screenshot or add not available image movie stills\n   */\n  onAfterCommand (jsonWireMsg) {\n    const command = jsonWireMsg.endpoint.match(/[^\\/]+$/);\n    const commandName = command ? command[0] : 'undefined';\n\n    helpers.debugLog('Incomming command: ' + jsonWireMsg.endpoint + ' => [' + commandName + ']\\n');\n\n    // Filter out non-action commands and keep only last action command\n    if (config.excludedActions.includes(commandName) || !config.jsonWireActions.includes(commandName) || !this.recordingPath) {\n      return;\n    }\n\n    const filename = this.frameNr.toString().padStart(4, '0') + '.png';\n    const filePath = path.resolve(this.recordingPath, filename);\n\n    try {\n      browser.saveScreenshot(filePath);\n      helpers.debugLog('- Screenshot!!\\n');\n    } catch (e) {\n      fs.writeFile(filePath, notAvailableImage, 'base64');\n      helpers.debugLog('- Screenshot not available...\\n');\n    }\n    this.frameNr++;\n  }\n\n  /**\n   * Add suite name to naming structure\n   */\n  onSuiteStart (suite) {\n    helpers.debugLog(`\\n\\n\\n--- New suite: ${suite.title} ---\\n`);\n    this.testnameStructure.push(suite.title.replace(/ /g, '-'));\n  }\n\n  /**\n   * Cleare suite name from naming structure\n   */\n  onSuiteEnd () {\n    this.testnameStructure.pop();\n  }\n\n  /**\n   * Setup filename based on test name and prepare storage directory\n   */\n  onTestStart (test) {\n    helpers.debugLog(`\\n\\n--- New test: ${test.title} ---\\n`);\n    this.testnameStructure.push(test.title.replace(/ /g, '-'));\n    const fullname = this.testnameStructure.slice(1).reduce((cur,acc) => cur + '--' + acc, this.testnameStructure[0]);\n    let browserName = browser.capabilities.browserName.toUpperCase();\n    if (browser.capabilities.deviceType) {\n      browserName += `-${browser.capabilities.deviceType.replace(/ /g, '-')}`;\n    }\n    this.testname = helpers.generateFilename(browserName, fullname);\n    this.frameNr = 0;\n    this.recordingPath = path.resolve(config.outputDir, config.rawPath, this.testname);\n    mkdirp.sync(this.recordingPath);\n  }\n\n  /**\n   * Remove empty directories\n   */\n  onTestSkip () {\n    if(this.recordingPath !== undefined) {\n      fs.removeSync(this.recordingPath);\n    }\n  }\n\n  /**\n   * Add attachment to Allue if applicable and start to generate the video\n   */\n  onTestEnd (test) {\n    this.testnameStructure.pop();\n\n    if(config.usingAllure) {\n      if (browser.capabilities.deviceType) {\n        allureReporter.addArgument('deviceType', browser.capabilities.deviceType);\n      }\n      if (browser.capabilities.browserVersion) {\n        allureReporter.addArgument('browserVersion', browser.capabilities.browserVersion);\n      }\n    }\n\n    if (test.state === 'failed' || (test.state === 'passed' && config.saveAllVideos)) {\n      const filePath = path.resolve(this.recordingPath, this.frameNr.toString().padStart(4, '0') + '.png');\n      try {\n        browser.saveScreenshot(filePath);\n        helpers.debugLog('- Screenshot!!\\n');\n      } catch (e) {\n        fs.writeFile(filePath, notAvailableImage, 'base64');\n        helpers.debugLog('- Screenshot not available...\\n');\n      }\n\n      const videoPath = path.resolve(config.outputDir, this.testname + '.mp4');\n      this.videos.push(videoPath);\n\n      if (config.usingAllure) {\n        allureReporter.addAttachment('Execution video', videoPath, 'video/mp4');\n      }\n\n      const command = `\"${ffmpegPath}\" -y -r 10 -i \"${this.recordingPath}/%04d.png\" -vcodec libx264` +\n        ` -crf 32 -pix_fmt yuv420p -vf \"scale=1200:trunc(ow/a/2)*2\",\"setpts=${config.videoSlowdownMultiplier}.0*PTS\"` +\n        ` \"${path.resolve(config.outputDir, this.testname)}.mp4\"`;\n\n      helpers.debugLog(`ffmpeg command: ${command}\\n`);\n\n      this.ffmpegCommands.push(command);\n    }\n  }\n\n  /**\n   * Finalize report if using allure and clean up\n   */\n  onRunnerEnd () {\n    try {\n      helpers.debugLog(`\\n\\n--- Awaiting videos ---\\n`);\n      this.ffmpegCommands.forEach((cmd) => spawn(cmd, { stdio: 'ignore', shell: true}));\n      this.videos = helpers.waitForVideos(this.videos);\n      helpers.debugLog(`\\n--- Videos are done ---\\n\\n`);\n\n      this.write('\\nGenerated:' + JSON.stringify(this.videos, undefined, 2) + '\\n\\n');\n\n      if (config.usingAllure) {\n        helpers.debugLog(`--- Patching allure report ---\\n`);\n\n        fs\n        .readdirSync(config.allureOutputDir)\n        .filter(line => line.includes('.mp4'))\n        .map(filename => path.resolve(config.allureOutputDir, filename))\n        .filter(allureFile => this.videos.includes(fs.readFileSync(allureFile).toString())) // Dont parse other browsers videos since they may not be ready\n        .forEach((filepath) => {\n          const videoFilePath = fs.readFileSync(filepath).toString();// The contents of the placeholder file is the video path\n          fs.copySync(videoFilePath, filepath);\n        });\n      }\n\n      this.write(`\\n\\nDone!\\n`);\n    }\n    catch(e) {\n      this.write('Error during onRunnerEnd:');\n      this.write(e.message);\n      this.write(e.stack);\n    }\n  }\n}\n"],"names":["ffmpegPath","spawn"],"mappings":"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"}