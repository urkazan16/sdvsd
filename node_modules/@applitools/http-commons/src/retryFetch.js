'use strict'

// NOTE: this file is separate because it's consumed from the visual-grid-client, which should be isomorphic (loaded from node and from the browser).
// Due to this reason, it should remain without dependencies on node builtins (e.g. 'util', which is the reason for defining `psetTimeout` below)

const CONNECTION_ERROR_CODES = new Set([
  'ENOTFOUND',
  'ECONNREFUSED',
  'ETIMEDOUT',
  'EHOSTUNREACH',
  'ECONNRESET',
  'request-timeout',
])

/**
 * @param {Function} f
 * @param {{retries?: number, sleepTime?: number, backoff?: number, idempotent?: boolean}} [options]
 */
async function retryFetch(
  f,
  {retries = 2, sleepTime = 100, backoff = 1.1, idempotent = true} = {},
) {
  for (let retry = 0; retry <= retries; retry++) {
    if (retry === retries) {
      return await f(retry)
    }
    try {
      return await f(retry)
    } catch (err) {
      if (CONNECTION_ERROR_CODES.has(err.code) || CONNECTION_ERROR_CODES.has(err.type)) {
        // retry
      } else if (err.code === 'ERR_X_STATUS_CODE_NOT_OK') {
        if (err.status >= 300 && err.status < 500) {
          throw err
        }
      } else if (idempotent) {
        // retry
      } else {
        throw err
      }
      await psetTimeout(sleepTime * backoff ** retry)
    }
  }
}

function psetTimeout(timeout) {
  return new Promise(res => {
    setTimeout(res, timeout)
  })
}

module.exports = retryFetch
