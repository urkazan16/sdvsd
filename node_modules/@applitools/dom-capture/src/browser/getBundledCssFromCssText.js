'use strict';

function makeGetBundledCssFromCssText({
  parseCss,
  CSSImportRule,
  absolutizeUrl,
  fetchCss,
  unfetchedToken,
}) {
  return async function getBundledCssFromCssText(cssText, resourceUrl) {
    let unfetchedResources;
    let bundledCss = '';

    try {
      const styleSheet = parseCss(cssText);
      for (const rule of Array.from(styleSheet.cssRules)) {
        if (rule instanceof CSSImportRule) {
          const nestedUrl = absolutizeUrl(rule.href, resourceUrl);
          const nestedResource = await fetchCss(nestedUrl);
          if (nestedResource !== undefined) {
            const {
              bundledCss: nestedCssText,
              unfetchedResources: nestedUnfetchedResources,
            } = await getBundledCssFromCssText(nestedResource, nestedUrl);

            nestedUnfetchedResources && (unfetchedResources = new Set(nestedUnfetchedResources));
            bundledCss = `${nestedCssText}${bundledCss}`;
          } else {
            unfetchedResources = new Set([nestedUrl]);
            bundledCss = `\n${unfetchedToken}${nestedUrl}${unfetchedToken}`;
          }
        }
      }
    } catch (ex) {
      console.log(`error during getBundledCssFromCssText, resourceUrl=${resourceUrl}`, ex);
    }

    bundledCss = `${bundledCss}${getCss(cssText, resourceUrl)}`;

    return {
      bundledCss,
      unfetchedResources,
    };
  };
}

function getCss(newText, url) {
  return `\n/** ${url} **/\n${newText}`;
}

module.exports = makeGetBundledCssFromCssText;
