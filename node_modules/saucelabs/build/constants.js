"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLI_PARAMS = exports.EPILOG = exports.USAGE = exports.TO_STRING_TAG = exports.SYMBOL_ITERATOR = exports.SYMBOL_TOSTRING = exports.SYMBOL_INSPECT = exports.REGION_MAPPING = exports.DEFAULT_OPTIONS = exports.JOB_ASSET_NAMES = exports.PARAMETERS_MAP = exports.PROTOCOL_MAP = void 0;

var _changeCase = _interopRequireDefault(require("change-case"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const protocols = [require('../apis/sauce.json'), require('../apis/rdc.json'), require('../apis/performance.json')];
const protocolFlattened = new Map();
const parametersFlattened = new Map();

for (const {
  paths,
  parameters,
  host,
  basePath
} of protocols) {
  for (const [name, description] of Object.entries(parameters || {})) {
    parametersFlattened.set(name, description);
  }

  for (const [endpoint, methods] of Object.entries(paths)) {
    for (const [method, description] of Object.entries(methods)) {
      let commandName = _changeCase.default.camelCase(description.operationId);
      /**
       * mark commands as depcrecated in the command names
       */


      if (description.deprecated) {
        commandName += 'Deprecated';
      }
      /**
       * ensure we don't double register commands
       */


      if (protocolFlattened.has(commandName)) {
        throw new Error(`command ${commandName} already registered`);
      }

      protocolFlattened.set(commandName, {
        method,
        endpoint,
        description,
        host,
        basePath
      });
    }
  }
}

const PROTOCOL_MAP = protocolFlattened;
exports.PROTOCOL_MAP = PROTOCOL_MAP;
const PARAMETERS_MAP = parametersFlattened;
exports.PARAMETERS_MAP = PARAMETERS_MAP;
const JOB_ASSET_NAMES = ['console.json', 'performance.json', 'automator.log', 'selenium-server.log', 'log.json', 'logcat.log', 'video.mp4'];
exports.JOB_ASSET_NAMES = JOB_ASSET_NAMES;
const DEFAULT_OPTIONS = {
  user: process.env.SAUCE_USERNAME,
  key: process.env.SAUCE_ACCESS_KEY,
  headless: false,
  region: 'us'
};
exports.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
const REGION_MAPPING = {
  'us': 'us-west-1.',
  // default endpoint
  'eu': 'eu-central-1.',
  'us-west-1': 'us-west-1.',
  'eu-central-1': 'eu-central-1.'
};
exports.REGION_MAPPING = REGION_MAPPING;
const SYMBOL_INSPECT = Symbol.for('nodejs.util.inspect.custom');
exports.SYMBOL_INSPECT = SYMBOL_INSPECT;
const SYMBOL_TOSTRING = Symbol.toStringTag;
exports.SYMBOL_TOSTRING = SYMBOL_TOSTRING;
const SYMBOL_ITERATOR = Symbol.iterator;
exports.SYMBOL_ITERATOR = SYMBOL_ITERATOR;
const TO_STRING_TAG = 'SauceLabs API Client';
exports.TO_STRING_TAG = TO_STRING_TAG;
const USAGE = `Sauce Labs API CLI

Usage: sl <command> [options]`;
exports.USAGE = USAGE;
const EPILOG = `Copyright ${new Date().getUTCFullYear()} Â© Sauce Labs`;
exports.EPILOG = EPILOG;
const CLI_PARAMS = [{
  alias: 'h',
  name: 'help',
  description: 'prints help menu'
}, {
  alias: 'u',
  name: 'user',
  description: 'your Sauce Labs username'
}, {
  alias: 'k',
  name: 'key',
  description: 'your Sauce Labs user key'
}, {
  alias: 'r',
  name: 'region',
  default: DEFAULT_OPTIONS.region,
  description: 'your Sauce Labs datacenter region, the following regions are available: `us-west-1` (short `us`), `eu-central-1` (short `eu`)'
}, {
  alias: 'h',
  name: 'headless',
  default: DEFAULT_OPTIONS.headless,
  description: 'if set to true you are accessing the headless Sauce instances (this discards the `region` option)'
}, {
  alias: 'p',
  name: 'proxy',
  description: 'use a proxy for fetching data instead of environment variables'
}];
exports.CLI_PARAMS = CLI_PARAMS;