"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

const Handlebars = require('handlebars');

const fs = require('fs-extra');

const _ = require('lodash');

const path = require('path');

const moment = require('moment');

const Png = require("pngjs").PNG;

const Jpeg = require("jpeg-js");

const open = require('open');

const momentDurationFormatSetup = require("moment-duration-format");

momentDurationFormatSetup(moment);

class HtmlGenerator {
  static htmlOutput(reportOptions, callback = () => {}) {
    try {
      let templateFile = fs.readFileSync(path.resolve(__dirname, '../src/wdio-html-reporter-template.hbs'), 'utf8');
      Handlebars.registerHelper('imageAsBase64', function (screenshotFile, screenshotPath, hbopts) {
        // occurs when there is an error file
        if (!fs.existsSync(screenshotFile)) {
          screenshotFile = `${screenshotPath}/${screenshotFile}`;
        }

        let png = new Png.sync.read(fs.readFileSync(path.resolve(`${screenshotFile}`)));
        return `data:image/jpeg;base64,${Jpeg.encode(png, 50).data.toString('base64')}`;
      });
      Handlebars.registerHelper('isValidSuite', function (suite, hbopts) {
        if (suite.title.length > 0 && suite.type === 'suite' && suite.tests.length > 0) {
          return hbopts.fn(this);
        }
      });
      Handlebars.registerHelper('testStateColour', function (state, hbopts) {
        if (state === 'passed') {
          return 'test-pass';
        } else if (state === 'failed') {
          return 'test-fail';
        } else if (state === 'pending') {
          return 'test-pending';
        } else if (state === 'skipped') {
          return 'test-skipped';
        }
      });
      Handlebars.registerHelper('testStateIcon', function (state, hbopts) {
        if (state === 'passed') {
          return '<span class="success">&#10004;</span>';
        } else if (state === 'failed') {
          return '<span class="error">&#10006;</span>';
        } else if (state === 'pending') {
          return '<span class="pending">&#10004;</span>';
        } else if (state === 'skipped') {
          return '<span class="skipped">&#10034;</span>';
        }
      });
      Handlebars.registerHelper('suiteStateColour', function (tests, hbopts) {
        let numTests = Object.keys(tests).length;

        let fail = _.values(tests).find(test => {
          return test.state === 'failed';
        });

        if (fail != null) {
          return 'suite-fail';
        }

        let passes = _.values(tests).filter(test => {
          return test.state === 'passed';
        });

        if (passes.length === numTests && numTests > 0) {
          return 'suite-pass';
        } //skipped is the lowest priority check


        let skipped = _.values(tests).find(test => {
          return test.state === 'skipped';
        });

        if (skipped != null) {
          return 'suite-pending';
        }

        return 'suite-unknown';
      });
      Handlebars.registerHelper('humanizeDuration', function (duration, hbopts) {
        return moment.duration(duration, "milliseconds").format('hh:mm:ss.SS', {
          trim: false
        });
      });
      Handlebars.registerHelper('ifSuiteHasTests', function (testsHash, hbopts) {
        if (Object.keys(testsHash).length > 0) {
          return hbopts.fn(this);
        }

        return hbopts.inverse(this);
      });
      Handlebars.registerHelper('ifEventIsError', function (event, hbopts) {
        if (event.type === 'Error') {
          return hbopts.fn(this);
        }

        return hbopts.inverse(this);
      });
      Handlebars.registerHelper('ifEventIsScreenshot', function (event, hbopts) {
        if (event.type === 'screenshot') {
          return hbopts.fn(this);
        }

        return hbopts.inverse(this);
      });
      Handlebars.registerHelper('ifEventIsLogMessage', function (event, hbopts) {
        if (event.type === 'log') {
          return hbopts.fn(this);
        }

        return hbopts.inverse(this);
      });
      Handlebars.registerHelper('logClass', function (text, hbopts) {
        if (text.includes('Test Iteration')) {
          return "test-iteration";
        } else {
          return "log-output";
        }
      });

      if (fs.pathExistsSync(reportOptions.outputDir)) {
        let jsonFile = reportOptions.reportFile.replace('.html', '.json');
        fs.outputFileSync(jsonFile, JSON.stringify(reportOptions.data));
      }

      let template = Handlebars.compile(templateFile);
      let html = template(reportOptions.data);

      if (fs.pathExistsSync(reportOptions.outputDir)) {
        fs.outputFileSync(reportOptions.reportFile, html);

        try {
          if (reportOptions.showInBrowser) {
            let childProcess = open(reportOptions.reportFile);
            childProcess.then(() => {
              console.log('browser launched');
            }, error => {
              console.error('showInBrowser error spawning :' + reportOptions.reportFile + " " + error.toString());
            });
          }
        } catch (ex) {
          console.error('Error opening browser:' + ex);
        }
      }

      callback(true);
    } catch (ex) {
      console.error('Error processing report template:' + ex);
      callback(false);
    }
  }

}

var _default = HtmlGenerator;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9odG1sR2VuZXJhdG9yLmpzIl0sIm5hbWVzIjpbIkhhbmRsZWJhcnMiLCJyZXF1aXJlIiwiZnMiLCJfIiwicGF0aCIsIm1vbWVudCIsIlBuZyIsIlBORyIsIkpwZWciLCJvcGVuIiwibW9tZW50RHVyYXRpb25Gb3JtYXRTZXR1cCIsIkh0bWxHZW5lcmF0b3IiLCJodG1sT3V0cHV0IiwicmVwb3J0T3B0aW9ucyIsImNhbGxiYWNrIiwidGVtcGxhdGVGaWxlIiwicmVhZEZpbGVTeW5jIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsInJlZ2lzdGVySGVscGVyIiwic2NyZWVuc2hvdEZpbGUiLCJzY3JlZW5zaG90UGF0aCIsImhib3B0cyIsImV4aXN0c1N5bmMiLCJwbmciLCJzeW5jIiwicmVhZCIsImVuY29kZSIsImRhdGEiLCJ0b1N0cmluZyIsInN1aXRlIiwidGl0bGUiLCJsZW5ndGgiLCJ0eXBlIiwidGVzdHMiLCJmbiIsInN0YXRlIiwibnVtVGVzdHMiLCJPYmplY3QiLCJrZXlzIiwiZmFpbCIsInZhbHVlcyIsImZpbmQiLCJ0ZXN0IiwicGFzc2VzIiwiZmlsdGVyIiwic2tpcHBlZCIsImR1cmF0aW9uIiwiZm9ybWF0IiwidHJpbSIsInRlc3RzSGFzaCIsImludmVyc2UiLCJldmVudCIsInRleHQiLCJpbmNsdWRlcyIsInBhdGhFeGlzdHNTeW5jIiwib3V0cHV0RGlyIiwianNvbkZpbGUiLCJyZXBvcnRGaWxlIiwicmVwbGFjZSIsIm91dHB1dEZpbGVTeW5jIiwiSlNPTiIsInN0cmluZ2lmeSIsInRlbXBsYXRlIiwiY29tcGlsZSIsImh0bWwiLCJzaG93SW5Ccm93c2VyIiwiY2hpbGRQcm9jZXNzIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImV4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQTFCOztBQUNBLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLFVBQUQs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RSxDQUFDcUQsY0FBSCxDQUFrQjFDLGFBQWEsQ0FBQzJDLFNBQWhDLENBQUosRUFBZ0Q7QUFDNUN0RCxRQUFBQSxFQUFFLENBQUMwRCxjQUFILENBQWtCL0MsYUFBYSxDQUFDNkMsVUFBaEMsRUFBNENPLElBQTVDOztBQUNBLFlBQUk7QUFDQSxjQUFJcEQsYUFBYSxDQUFDcUQsYUFBbEIsRUFBaUM7QUFFN0IsZ0JBQUlDLFlBQVksR0FBRzFELElBQUksQ0FBQ0ksYUFBYSxDQUFDNkMsVUFBZixDQUF2QjtBQUNBUyxZQUFBQSxZQUFZLENBQUNDLElBQWIsQ0FDSSxNQUFNO0FBQ0ZDLGNBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGtCQUFaO0FBQ0gsYUFITCxFQUlLQyxLQUFELElBQVc7QUFDUEYsY0FBQUEsT0FBTyxDQUFDRSxLQUFSLENBQWMsbUNBQW1DMUQsYUFBYSxDQUFDNkMsVUFBakQsR0FBOEQsR0FBOUQsR0FBb0VhLEtBQUssQ0FBQzFDLFFBQU4sRUFBbEY7QUFDSCxhQU5MO0FBT0g7QUFDSixTQVpELENBWUUsT0FBTzJDLEVBQVAsRUFBVztBQUNUSCxVQUFBQSxPQUFPLENBQUNFLEtBQVIsQ0FBYywyQkFBMkJDLEVBQXpDO0FBQ0g7QUFDSjs7QUFDRDFELE1BQUFBLFFBQVEsQ0FBQyxJQUFELENBQVI7QUFDSCxLQWxKRCxDQWtKRSxPQUFNMEQsRUFBTixFQUFVO0FBQ1JILE1BQUFBLE9BQU8sQ0FBQ0UsS0FBUixDQUFjLHNDQUFzQ0MsRUFBcEQ7QUFDQTFELE1BQUFBLFFBQVEsQ0FBQyxLQUFELENBQVI7QUFDSDtBQUNKOztBQTFKZ0I7O2VBNkpOSCxhIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmNvbnN0IEhhbmRsZWJhcnMgPSByZXF1aXJlKCdoYW5kbGViYXJzJyk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcclxuY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcclxuY29uc3QgUG5nID0gcmVxdWlyZShcInBuZ2pzXCIpLlBORztcclxuY29uc3QgSnBlZyA9IHJlcXVpcmUoXCJqcGVnLWpzXCIpO1xyXG5jb25zdCBvcGVuID0gcmVxdWlyZSgnb3BlbicpO1xyXG5cclxuY29uc3QgbW9tZW50RHVyYXRpb25Gb3JtYXRTZXR1cCA9IHJlcXVpcmUoXCJtb21lbnQtZHVyYXRpb24tZm9ybWF0XCIpO1xyXG5tb21lbnREdXJhdGlvbkZvcm1hdFNldHVwKG1vbWVudCk7XHJcblxyXG5cclxuY2xhc3MgSHRtbEdlbmVyYXRvciAge1xyXG5cclxuXHJcbiAgICBzdGF0aWMgaHRtbE91dHB1dChyZXBvcnRPcHRpb25zLCBjYWxsYmFjayA9ICgpID0+e30pIHtcclxuICAgICAgICB0cnkge1xyXG5cclxuICAgICAgICAgICAgbGV0IHRlbXBsYXRlRmlsZSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vc3JjL3dkaW8taHRtbC1yZXBvcnRlci10ZW1wbGF0ZS5oYnMnKSwgJ3V0ZjgnKTtcclxuXHJcbiAgICAgICAgICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2ltYWdlQXNCYXNlNjQnLCBmdW5jdGlvbiAoc2NyZWVuc2hvdEZpbGUsIHNjcmVlbnNob3RQYXRoLCBoYm9wdHMpIHtcclxuICAgICAgICAgICAgICAgIC8vIG9jY3VycyB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIGZpbGVcclxuICAgICAgICAgICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhzY3JlZW5zaG90RmlsZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JlZW5zaG90RmlsZSA9IGAke3NjcmVlbnNob3RQYXRofS8ke3NjcmVlbnNob3RGaWxlfWBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBwbmcgPSBuZXcgUG5nLnN5bmMucmVhZChmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKGAke3NjcmVlbnNob3RGaWxlfWApKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYGRhdGE6aW1hZ2UvanBlZztiYXNlNjQsJHtKcGVnLmVuY29kZShwbmcsIDUwKS5kYXRhLnRvU3RyaW5nKCdiYXNlNjQnKX1gXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaXNWYWxpZFN1aXRlJywgZnVuY3Rpb24gKHN1aXRlLCBoYm9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdWl0ZS50aXRsZS5sZW5ndGggPiAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc3VpdGUudHlwZSA9PT0gJ3N1aXRlJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHN1aXRlLnRlc3RzLmxlbmd0aCA+IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhib3B0cy5mbih0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCd0ZXN0U3RhdGVDb2xvdXInLCBmdW5jdGlvbiAoc3RhdGUsIGhib3B0cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlID09PSAncGFzc2VkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndGVzdC1wYXNzJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdmYWlsZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0ZXN0LWZhaWwnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0ZXN0LXBlbmRpbmcnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ3NraXBwZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3Rlc3Qtc2tpcHBlZCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCd0ZXN0U3RhdGVJY29uJywgZnVuY3Rpb24gKHN0YXRlLCBoYm9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gJ3Bhc3NlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwic3VjY2Vzc1wiPiYjMTAwMDQ7PC9zcGFuPicgO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ2ZhaWxlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiZXJyb3JcIj4mIzEwMDA2Ozwvc3Bhbj4nIDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdwZW5kaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCJwZW5kaW5nXCI+JiMxMDAwNDs8L3NwYW4+JyA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSAnc2tpcHBlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwic2tpcHBlZFwiPiYjMTAwMzQ7PC9zcGFuPicgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ3N1aXRlU3RhdGVDb2xvdXInLCBmdW5jdGlvbiAodGVzdHMsIGhib3B0cykge1xyXG4gICAgICAgICAgICAgICAgbGV0IG51bVRlc3RzID0gT2JqZWN0LmtleXModGVzdHMpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgZmFpbCA9IF8udmFsdWVzKHRlc3RzKS5maW5kKCh0ZXN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3Quc3RhdGUgPT09ICdmYWlsZWQnO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGlmIChmYWlsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3N1aXRlLWZhaWwnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBwYXNzZXMgPSBfLnZhbHVlcyh0ZXN0cykuZmlsdGVyKCh0ZXN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3Quc3RhdGUgPT09ICdwYXNzZWQnO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGlmIChwYXNzZXMubGVuZ3RoID09PSBudW1UZXN0cyAmJiBudW1UZXN0cyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3N1aXRlLXBhc3MnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vc2tpcHBlZCBpcyB0aGUgbG93ZXN0IHByaW9yaXR5IGNoZWNrXHJcbiAgICAgICAgICAgICAgICBsZXQgc2tpcHBlZCA9IF8udmFsdWVzKHRlc3RzKS5maW5kKCh0ZXN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3Quc3RhdGUgPT09ICdza2lwcGVkJztcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdzdWl0ZS1wZW5kaW5nJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3N1aXRlLXVua25vd24nXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaHVtYW5pemVEdXJhdGlvbicsIGZ1bmN0aW9uIChkdXJhdGlvbiwgaGJvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50LmR1cmF0aW9uKGR1cmF0aW9uLCBcIm1pbGxpc2Vjb25kc1wiKS5mb3JtYXQoJ2hoOm1tOnNzLlNTJywge3RyaW06IGZhbHNlfSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpZlN1aXRlSGFzVGVzdHMnLCBmdW5jdGlvbiAodGVzdHNIYXNoLCBoYm9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0ZXN0c0hhc2gpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGJvcHRzLmZuKHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGJvcHRzLmludmVyc2UodGhpcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2lmRXZlbnRJc0Vycm9yJywgZnVuY3Rpb24gKGV2ZW50LCBoYm9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAnRXJyb3InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhib3B0cy5mbih0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBoYm9wdHMuaW52ZXJzZSh0aGlzKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpZkV2ZW50SXNTY3JlZW5zaG90JywgZnVuY3Rpb24gKGV2ZW50LCBoYm9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAnc2NyZWVuc2hvdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGJvcHRzLmZuKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhib3B0cy5pbnZlcnNlKHRoaXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2lmRXZlbnRJc0xvZ01lc3NhZ2UnLCBmdW5jdGlvbiAoZXZlbnQsIGhib3B0cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdsb2cnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhib3B0cy5mbih0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBoYm9wdHMuaW52ZXJzZSh0aGlzKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdsb2dDbGFzcycsIGZ1bmN0aW9uICh0ZXh0ICwgaGJvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGV4dC5pbmNsdWRlcygnVGVzdCBJdGVyYXRpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRlc3QtaXRlcmF0aW9uXCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImxvZy1vdXRwdXRcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChmcy5wYXRoRXhpc3RzU3luYyhyZXBvcnRPcHRpb25zLm91dHB1dERpcikpIHtcclxuICAgICAgICAgICAgICAgbGV0IGpzb25GaWxlID0gcmVwb3J0T3B0aW9ucy5yZXBvcnRGaWxlLnJlcGxhY2UoJy5odG1sJyAsICcuanNvbicpIDtcclxuICAgICAgICAgICAgICAgICAgICBmcy5vdXRwdXRGaWxlU3luYyhqc29uRmlsZSwgSlNPTi5zdHJpbmdpZnkocmVwb3J0T3B0aW9ucy5kYXRhKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCB0ZW1wbGF0ZSA9IEhhbmRsZWJhcnMuY29tcGlsZSh0ZW1wbGF0ZUZpbGUpO1xyXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHRlbXBsYXRlKHJlcG9ydE9wdGlvbnMuZGF0YSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZnMucGF0aEV4aXN0c1N5bmMocmVwb3J0T3B0aW9ucy5vdXRwdXREaXIpKSB7XHJcbiAgICAgICAgICAgICAgICBmcy5vdXRwdXRGaWxlU3luYyhyZXBvcnRPcHRpb25zLnJlcG9ydEZpbGUsIGh0bWwpO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVwb3J0T3B0aW9ucy5zaG93SW5Ccm93c2VyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hpbGRQcm9jZXNzID0gb3BlbihyZXBvcnRPcHRpb25zLnJlcG9ydEZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZFByb2Nlc3MudGhlbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYnJvd3NlciBsYXVuY2hlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3Nob3dJbkJyb3dzZXIgZXJyb3Igc3Bhd25pbmcgOicgKyByZXBvcnRPcHRpb25zLnJlcG9ydEZpbGUgKyBcIiBcIiArIGVycm9yLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG9wZW5pbmcgYnJvd3NlcjonICsgZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgIH0gY2F0Y2goZXgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyByZXBvcnQgdGVtcGxhdGU6JyArIGV4KTtcclxuICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSHRtbEdlbmVyYXRvcjtcclxuIl19