"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _chromedriver = _interopRequireDefault(require("chromedriver"));

var _getFilePath = _interopRequireDefault(require("./utils/getFilePath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_LOG_FILENAME = 'ChromeDriver.txt';

class ChromeDriverLauncher {
  constructor() {
    this.chromeDriverLogs = null;
    this.chromeDriverArgs = null;
    this.logToStdout = false;
    return this;
  }

  async onPrepare(config) {
    this.chromeDriverArgs = config.chromeDriverArgs || [];
    this.chromeDriverLogs = config.chromeDriverLogs;

    if (!this.chromeDriverArgs.find(arg => arg.startsWith('--port'))) {
      this.chromeDriverArgs.push(`--port=${config.port}`);
    }

    if (!this.chromeDriverArgs.find(arg => arg.startsWith('--url-base'))) {
      this.chromeDriverArgs.push(`--url-base=${config.path}`);
    }

    this.process = await _chromedriver.default.start(this.chromeDriverArgs, true);

    if (typeof this.chromeDriverLogs === 'string') {
      this._redirectLogStream();
    }
  }

  onComplete() {
    _chromedriver.default.stop();
  }

  _redirectLogStream() {
    const logFile = (0, _getFilePath.default)(this.chromeDriverLogs, DEFAULT_LOG_FILENAME); // ensure file & directory exists

    _fsExtra.default.ensureFileSync(logFile);

    const logStream = _fsExtra.default.createWriteStream(logFile, {
      flags: 'w'
    });

    this.process.stdout.pipe(logStream);
    this.process.stderr.pipe(logStream);
  }

}

exports.default = ChromeDriverLauncher;