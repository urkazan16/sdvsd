{"version":3,"sources":["../../src/modules/dockerEvents.js"],"names":["NANOSECONDS","DEFAULT_OPTIONS","format","CMD","DockerEvents","init","options","cmdOptions","cmd","concat","join","buffer","ps","stdout","setEncoding","on","data","push","jsonString","json","_tryParse","length","_parseEventData","code","_onExit","process","_onDisconnect","kill","connected","send","type","message","jsonData","Action","Actor","from","id","scope","status","timeNano","Type","eventType","image","timeStamp","Date","detail","actor","text","JSON","parse","e","module","exports"],"mappings":"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","sourcesContent":["import { exec } from 'child_process';\nimport serializeOptions from '../utils/optionsSerializer';\nimport deepMerge from '../utils/deepMerge';\n\nconst NANOSECONDS = 1000000;\nconst DEFAULT_OPTIONS = {\n    format: '{{json .}}'\n};\n\nconst CMD = 'docker events';\n\nconst DockerEvents = {\n    /**\n     * @param {Object} [options]\n     */\n    init(options = {}) {\n        const cmdOptions = deepMerge({}, DEFAULT_OPTIONS, options);\n        const cmd = [CMD].concat(serializeOptions(cmdOptions)).join(' ');\n        const buffer = [];\n\n        const ps = exec(cmd);\n        ps.stdout.setEncoding('utf-8');\n        ps.stdout.on('data', (data) => {\n            buffer.push(data);\n            const jsonString = buffer.join('');\n            const json = this._tryParse(jsonString);\n            if (json) {\n                buffer.length = 0;\n                this._parseEventData(json);\n            }\n        });\n\n        //Handle sub-process exit\n        ps.on('exit', (code) => this._onExit(code, cmd));\n\n        //Handle forked process disconnect\n        process.on('disconnect', () => this._onDisconnect());\n\n        this.process = ps;\n    },\n\n    _onDisconnect() {\n        this.process.kill();\n        this.process = null;\n    },\n\n    /**\n     * @param {Number} code\n     * @param {String} cmd\n     * @private\n     */\n    _onExit(code, cmd) {\n        if (code !== 0 && process.connected) {\n            process.send({\n                type: 'error',\n                message: `Error executing sub-child: ${ cmd }`\n            });\n        }\n    },\n    /**\n     * @param {Object} jsonData\n     * @private\n     */\n    _parseEventData(jsonData) {\n        if (!jsonData) {\n            return;\n        }\n\n        const {\n            Action,\n            Actor = {},\n            from = null,\n            id = null,\n            scope = null,\n            status,\n            timeNano,\n            Type,\n        } = jsonData;\n\n        const eventType = `${Type}.${Action}`;\n\n        process.send({\n            image: from,\n            timeStamp: new Date(timeNano / NANOSECONDS),\n            type: eventType,\n            status,\n            detail: {\n                id,\n                scope,\n                actor: Actor\n            }\n        });\n    },\n\n    /**\n     * @param {String} text\n     * @return {?Object}\n     * @private\n     */\n    _tryParse(text) {\n        try {\n            return JSON.parse(text);\n        } catch (e) {\n            return null;\n        }\n    }\n};\n\n\nprocess.on('message', (options) => {\n    DockerEvents.init(options);\n});\n\nmodule.exports = DockerEvents;\n\n"],"file":"dockerEvents.js"}