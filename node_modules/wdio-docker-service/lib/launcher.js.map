{"version":3,"sources":["../src/launcher.js"],"names":["DEFAULT_LOG_FILENAME","Logger","DockerLauncher","constructor","logToStdout","docker","dockerLogs","onPrepare","config","watchMode","watch","setLevel","logLevel","dockerOptions","args","command","healthCheck","image","options","onDockerReady","Promise","reject","Error","Docker","debug","logFile","once","_redirectLogStream","run","then","catch","err","error","message","onComplete","stop","afterSession","fs","ensureFile","logStream","createWriteStream","flags","process","stdout","pipe","stderr","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,oBAAoB,GAAG,gBAA7B;AACA,MAAMC,MAAM,GAAG,qBAAO,qBAAP,CAAf;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,GAAG;AACV,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACH;;AAEDC,EAAAA,SAAS,CAACC,MAAD,EAAS;AACd,SAAKJ,WAAL,GAAmBI,MAAM,CAACJ,WAA1B;AACA,SAAKE,UAAL,GAAkBE,MAAM,CAACF,UAAzB;AACA,SAAKG,SAAL,GAAiB,CAAC,CAACD,MAAM,CAACE,KAA1B;AAEAT,IAAAA,MAAM,CAACU,QAAP,CAAgBH,MAAM,CAACI,QAAP,IAAmB,MAAnC;AAEA,UAAM;AACFC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IADW;AAEXC,QAAAA,OAFW;AAGXC,QAAAA,WAHW;AAIXC,QAAAA,KAJW;AAKXC,QAAAA;AALW,OADb;AAQFC,MAAAA,aARE;AASFP,MAAAA;AATE,QAUFJ,MAVJ;;AAYA,QAAI,CAACS,KAAL,EAAY;AACR,aAAOG,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,4CAAV,CAAf,CAAP;AACH;;AAED,SAAKjB,MAAL,GAAc,IAAIkB,eAAJ,CAAWN,KAAX,EAAkB;AAC5BH,MAAAA,IAD4B;AAE5BC,MAAAA,OAF4B;AAG5BC,MAAAA,WAH4B;AAI5BE,MAAAA,OAJ4B;AAK5BM,MAAAA,KAAK,EAAEZ,QAAQ,IAAIA,QAAQ,KAAK;AALJ,KAAlB,EAMXX,MANW,CAAd;;AAQA,QAAI,OAAO,KAAKK,UAAZ,KAA2B,QAA/B,EAAyC;AACrC,YAAMmB,OAAO,GAAG,0BAAY,KAAKnB,UAAjB,EAA6BN,oBAA7B,CAAhB;AAEA,WAAKK,MAAL,CAAYqB,IAAZ,CAAiB,gBAAjB,EAAmC,MAAM;AACrC,aAAKC,kBAAL,CAAwBF,OAAxB;AACH,OAFD;AAGH;;AAED,WAAO,KAAKpB,MAAL,CAAYuB,GAAZ,GACFC,IADE,CACG,MAAM;AACR,UAAI,OAAOV,aAAP,KAAyB,UAA7B,EAAyC;AACrCA,QAAAA,aAAa;AAChB;AACJ,KALE,EAMFW,KANE,CAMKC,GAAD,IAAS;AACZ9B,MAAAA,MAAM,CAAC+B,KAAP,CAAc,4BAA4BD,GAAG,CAACE,OAAS,EAAvD;AACH,KARE,CAAP;AASH;;AAEDC,EAAAA,UAAU,GAAG;AACT;AACA,QAAI,CAAC,KAAKzB,SAAN,IAAmB,KAAKJ,MAA5B,EAAoC;AAChC,aAAO,KAAKA,MAAL,CAAY8B,IAAZ,EAAP;AACH;AACJ;;AAEDC,EAAAA,YAAY,GAAG;AACX,QAAI,KAAK/B,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAY8B,IAAZ;AACH;AACJ;AAED;;;;;;AAIAR,EAAAA,kBAAkB,CAACF,OAAD,EAAU;AACxB;AACA,WAAOY,iBAAGC,UAAH,CAAcb,OAAd,EAAuBI,IAAvB,CAA4B,MAAM;AACrC,YAAMU,SAAS,GAAGF,iBAAGG,iBAAH,CAAqBf,OAArB,EAA8B;AAAEgB,QAAAA,KAAK,EAAE;AAAT,OAA9B,CAAlB;;AAEA,WAAKpC,MAAL,CAAYqC,OAAZ,CAAoBC,MAApB,CAA2BC,IAA3B,CAAgCL,SAAhC;AACA,WAAKlC,MAAL,CAAYqC,OAAZ,CAAoBG,MAApB,CAA2BD,IAA3B,CAAgCL,SAAhC;AACH,KALM,CAAP;AAMH;;AAlFgB;;AAqFrBO,MAAM,CAACC,OAAP,GAAiB7C,cAAjB","sourcesContent":["import fs from 'fs-extra';\nimport Docker from './utils/docker';\nimport getFilePath from './utils/getFilePath';\nimport logger from '@wdio/logger';\n\nconst DEFAULT_LOG_FILENAME = 'docker-log.txt';\nconst Logger = logger('wdio-docker-service');\n\nclass DockerLauncher {\n    constructor() {\n        this.logToStdout = false;\n        this.docker = null;\n        this.dockerLogs = null;\n    }\n\n    onPrepare(config) {\n        this.logToStdout = config.logToStdout;\n        this.dockerLogs = config.dockerLogs;\n        this.watchMode = !!config.watch;\n\n        Logger.setLevel(config.logLevel || 'info');\n\n        const {\n            dockerOptions: {\n                args,\n                command,\n                healthCheck,\n                image,\n                options,\n            },\n            onDockerReady,\n            logLevel\n        } = config;\n\n        if (!image) {\n            return Promise.reject(new Error('dockerOptions.image is a required property'));\n        }\n\n        this.docker = new Docker(image, {\n            args,\n            command,\n            healthCheck,\n            options,\n            debug: logLevel && logLevel === 'debug'\n        }, Logger);\n\n        if (typeof this.dockerLogs === 'string') {\n            const logFile = getFilePath(this.dockerLogs, DEFAULT_LOG_FILENAME);\n\n            this.docker.once('processCreated', () => {\n                this._redirectLogStream(logFile);\n            });\n        }\n\n        return this.docker.run()\n            .then(() => {\n                if (typeof onDockerReady === 'function') {\n                    onDockerReady();\n                }\n            })\n            .catch((err) => {\n                Logger.error(`Failed to run container: ${ err.message }`);\n            });\n    }\n\n    onComplete() {\n        // do not stop docker if in watch mode\n        if (!this.watchMode && this.docker) {\n            return this.docker.stop();\n        }\n    }\n\n    afterSession() {\n        if (this.docker) {\n            this.docker.stop();\n        }\n    }\n\n    /**\n     * @param logFile\n     * @private\n     */\n    _redirectLogStream(logFile) {\n        // ensure file & directory exists\n        return fs.ensureFile(logFile).then(() => {\n            const logStream = fs.createWriteStream(logFile, { flags: 'w' });\n\n            this.docker.process.stdout.pipe(logStream);\n            this.docker.process.stderr.pipe(logStream);\n        });\n    }\n}\n\nmodule.exports = DockerLauncher;\n"],"file":"launcher.js"}