{"version":3,"sources":["../../src/utils/dockerEventsListener.js"],"names":["DOCKER_EVENTS_MODULE","path","resolve","__dirname","DockerEventsListener","EventEmitter","constructor","logger","console","_subprocess","_onMessage","bind","_onError","connect","opt","disconnect","sps","on","send","warn","pid","connected","message","type","Error","emit","err","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,oBAAoB,GAAGC,cAAKC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,sBAA9B,CAA7B;AAEA;;;;;;AAIA,MAAMC,oBAAN,SAAmCC,eAAnC,CAAgD;AAC5C;;;;AAIAC,EAAAA,WAAW,CAACC,MAAM,GAAGC,OAAV,EAAmB;AAC1B;AAEA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,WAAL,GAAmB,IAAnB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACH;AAED;;;;;AAGAE,EAAAA,OAAO,CAACC,GAAG,GAAG,EAAP,EAAW;AACd,SAAKC,UAAL;AAEA,UAAMC,GAAG,GAAG,yBAAKhB,oBAAL,CAAZ;AACAgB,IAAAA,GAAG,CAACC,EAAJ,CAAO,SAAP,EAAkB,KAAKP,UAAvB;AACAM,IAAAA,GAAG,CAACC,EAAJ,CAAO,OAAP,EAAgB,KAAKL,QAArB;AACAI,IAAAA,GAAG,CAACE,IAAJ,CAASJ,GAAT;AAEA,SAAKP,MAAL,CAAYY,IAAZ,CAAiB,kCAAjB,EAAqDH,GAAG,CAACI,GAAzD;AAEA,SAAKX,WAAL,GAAmBO,GAAnB;AACH;;AAEDD,EAAAA,UAAU,GAAG;AACT,QAAI,KAAKN,WAAL,IAAoB,KAAKA,WAAL,CAAiBY,SAAzC,EAAoD;AAChD,WAAKd,MAAL,CAAYY,IAAZ,CAAiB,qCAAjB,EAAwD,KAAKV,WAAL,CAAiBW,GAAzE;;AACA,WAAKX,WAAL,CAAiBM,UAAjB;AACH;;AACD,SAAKN,WAAL,GAAmB,IAAnB;AACH;AAED;;;;;;AAIAC,EAAAA,UAAU,CAACY,OAAD,EAAU;AAChB,QAAI,YAAYA,OAAO,CAACC,IAAxB,EAA8B;AAC1B,WAAKX,QAAL,CAAc,IAAIY,KAAJ,CAAUF,OAAO,CAACA,OAAlB,CAAd;;AACA;AACH;;AAED,SAAKG,IAAL,CAAUH,OAAO,CAACC,IAAlB,EAAwBD,OAAxB;AACH;;AAEDV,EAAAA,QAAQ,CAACc,GAAD,EAAM;AACV,SAAKnB,MAAL,CAAYoB,KAAZ,CAAkBD,GAAlB;AACA,SAAKX,UAAL;AACH;;AAtD2C;;eAyDjCX,oB","sourcesContent":["import EventEmitter from 'events';\nimport { fork } from 'child_process';\nimport path from 'path';\n\nconst DOCKER_EVENTS_MODULE = path.resolve(__dirname, '..', 'modules/dockerEvents');\n\n/**\n * @class DockerEventsListener\n * @extends {EventEmitter}\n */\nclass DockerEventsListener extends EventEmitter {\n    /**\n     * @constructor\n     * @param {ColorLogger} [logger]\n     */\n    constructor(logger = console) {\n        super();\n\n        this.logger = logger;\n        this._subprocess = null;\n        this._onMessage = this._onMessage.bind(this);\n        this._onError = this._onError.bind(this);\n    }\n\n    /**\n     * @param {Object} opt Command line options for 'docker events'\n     */\n    connect(opt = {}) {\n        this.disconnect();\n\n        const sps = fork(DOCKER_EVENTS_MODULE);\n        sps.on('message', this._onMessage);\n        sps.on('error', this._onError);\n        sps.send(opt);\n\n        this.logger.warn('Connecting dockerEventsListener:', sps.pid);\n\n        this._subprocess = sps;\n    }\n\n    disconnect() {\n        if (this._subprocess && this._subprocess.connected) {\n            this.logger.warn('Disconnecting dockerEventsListener:', this._subprocess.pid);\n            this._subprocess.disconnect();\n        }\n        this._subprocess = null;\n    }\n\n    /**\n     * @param {Object} message Event JSON\n     * @private\n     */\n    _onMessage(message) {\n        if ('error' === message.type) {\n            this._onError(new Error(message.message));\n            return;\n        }\n\n        this.emit(message.type, message);\n    }\n\n    _onError(err) {\n        this.logger.error(err);\n        this.disconnect();\n    }\n}\n\nexport default DockerEventsListener;\n\n\n\n"],"file":"dockerEventsListener.js"}