{"version":3,"sources":["../../src/utils/docker.js"],"names":["SPACE","INSPECT_DOCKER_INTERVAL","MAX_INSPECT_ATTEMPTS","DEFAULT_OPTIONS","rm","Docker","EventEmitter","constructor","image","options","healthCheck","command","args","debug","logger","console","Error","cidfile","path","join","process","cwd","replace","dockerEventsListener","DockerEventsListener","url","cmdChain","concat","push","dockerRunCommand","run","log","connect","filter","once","event","info","JSON","stringify","_removeStaleContainer","then","_isImagePresent","catch","warn","_pullImage","emit","stdout","on","data","toString","stderr","error","_reportWhenDockerIsRunning","err","code","Promise","resolve","stop","kill","disconnect","maxRetries","inspectInterval","startDelay","undefined","delay","reject","attempts","pollstatus","poll","clearTimeout","setTimeout","fs","readFile","cid","stopContainer","removeContainer","remove","timeMs"],"mappings":"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","sourcesContent":["import deepMerge from './deepMerge';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport Ping from './ping';\nimport { runCommand, runProcess } from './childProcess';\nimport { EventEmitter } from 'events';\nimport serializeOptions from './optionsSerializer';\nimport DockerEventsListener from './dockerEventsListener';\n\nconst SPACE = ' ';\nconst INSPECT_DOCKER_INTERVAL = 500;\nconst MAX_INSPECT_ATTEMPTS = 10;\nconst DEFAULT_OPTIONS = {\n    rm: true\n};\n\n/**\n * @class {Docker} Provides functionality to run docker container\n */\nclass Docker extends EventEmitter {\n    /**\n     * @param {String} image Docker image/tag name\n     * @param {Object} [options] Docker run options\n     * @param {String|Object} [healthCheck] Url that verifies that service is running\n     * @param {String} [command] docker command that follows image/tag name\n     * @param {String} [args] docker args that follow image/tag name\n     * @param {Object} logger Color logger or console\n     * @param {Boolean} [debug]\n     */\n    constructor(image, { options = {}, healthCheck = {}, command, args, debug = false } = {}, logger = console) {\n        super();\n\n        if (!image) {\n            throw new Error('Missing required image argument');\n        }\n\n        this.args = args;\n        this.cidfile = path.join(process.cwd(), `${ image.replace(/\\W+/g, '_') }.cid`);\n        this.command = command;\n        this.debug = debug;\n        this.healthCheck = healthCheck;\n        this.image = image;\n        this.logger = logger;\n        this.process = null;\n        this.dockerEventsListener = new DockerEventsListener(logger);\n\n        if (typeof healthCheck === 'string') {\n            this.healthCheck = { url: healthCheck };\n        }\n\n        this.options = deepMerge({\n            cidfile: this.cidfile\n        }, DEFAULT_OPTIONS, options);\n\n        const cmdChain = ['docker run'].concat(serializeOptions(this.options), [this.image]);\n\n        if (this.command) {\n            cmdChain.push(this.command);\n        }\n\n        if (this.args) {\n            cmdChain.push(this.args);\n        }\n\n        this.dockerRunCommand = cmdChain.join(SPACE);\n    }\n\n    /**\n     * @return {Promise}\n     */\n    run() {\n        this.logger.log(`Docker command: ${ this.dockerRunCommand }`);\n        this.dockerEventsListener.connect({\n            filter: `image=${ this.image }`\n        });\n\n        if (this.debug) {\n            this.dockerEventsListener.once('image.pull', (event) => {\n                this.logger.info('Pulling image:', JSON.stringify(event, null, 4));\n            });\n        }\n\n        return this._removeStaleContainer()\n            .then(() => {\n                return this._isImagePresent()\n                    .catch(() => {\n                        this.logger.warn('NOTE: Pulling image for the first time. Please be patient.');\n                        return this._pullImage();\n                    });\n            })\n            .then(() => {\n                this.logger.info(`Launching docker image '${ this.image }'`);\n                return runProcess(this.dockerRunCommand);\n            })\n            .then(process => {\n                this.process = process;\n                this.emit('processCreated');\n\n                if (this.debug) {\n                    this.process.stdout.on('data', (data) => {\n                        this.logger.log(data.toString());\n                    });\n\n                    this.process.stderr.on('data', (data) => {\n                        this.logger.error(data.toString());\n                    });\n\n                    this.dockerEventsListener.once('container.start', (event) => {\n                        this.logger.info('Container started:', JSON.stringify(event, null, 4));\n                    });\n\n                    this.dockerEventsListener.once('container.stop', (event) => {\n                        this.logger.info('Container stopped:', JSON.stringify(event, null, 4));\n                    });\n                }\n\n                return this._reportWhenDockerIsRunning()\n                    .then(() => {\n                        this.logger.info('Docker container is ready');\n                        return process;\n                    });\n            })\n            .catch((err) => {\n                if (err.code === 'ENOENT') {\n                    return Promise.resolve();\n                }\n\n                throw err;\n            });\n    }\n\n    /**\n     * @return {Promise}\n     */\n    stop() {\n        return this._removeStaleContainer()\n            .then(() => {\n                if (this.process) {\n                    this.process.kill();\n                    this.process = null;\n                }\n\n                this.logger.info('Docker container has stopped');\n                this.dockerEventsListener.disconnect();\n            });\n    }\n\n    /**\n     * Polls for availability of application running in a docker\n     * @return {Promise<any>}\n     * @private\n     */\n    _reportWhenDockerIsRunning() {\n        const {\n            url,\n            maxRetries = MAX_INSPECT_ATTEMPTS,\n            inspectInterval = INSPECT_DOCKER_INTERVAL,\n            startDelay = 0\n        } = this.healthCheck;\n\n        if (url === undefined) {\n            return Promise.resolve();\n        }\n\n        return Docker.delay(startDelay)\n            .then(() => new Promise((resolve, reject) => {\n                let attempts = 0;\n                let pollstatus = null;\n\n                const poll = () => {\n                    Ping(url)\n                        .then(() => {\n                            resolve();\n                            clearTimeout(pollstatus);\n                            pollstatus = null;\n                        })\n                        .catch((err) => {\n                            attempts++;\n                            if (attempts >= maxRetries) {\n                                clearTimeout(pollstatus);\n                                pollstatus = null;\n                                reject(err);\n                                return;\n                            }\n\n                            pollstatus = setTimeout(poll, inspectInterval);\n                        });\n                };\n\n                pollstatus = setTimeout(poll, inspectInterval);\n            }));\n    }\n\n    /**\n     * @return {Promise}\n     * @private\n     */\n    _isImagePresent() {\n        return runCommand(`docker inspect ${ this.image }`);\n    }\n\n    /**\n     * @return {Promise}\n     * @private\n     */\n    _pullImage() {\n        return runCommand(`docker pull ${ this.image }`);\n    }\n\n    /**\n     * Removes any stale docker image\n     * @return {Promise}\n     * @private\n     */\n    _removeStaleContainer() {\n        return fs.readFile(this.cidfile)\n            .then((cid) => {\n                this.logger.info('Shutting down running container');\n                return Docker.stopContainer(cid).then(() => Docker.removeContainer(cid));\n            })\n            .catch(() => Promise.resolve())\n            .then(() => {\n                this.logger.info('Cleaning up CID files');\n                return fs.remove(this.cidfile);\n            });\n    }\n\n    /**\n     * @static\n     * @param {Number} timeMs\n     * @return {Promise}\n     */\n    static delay(timeMs) {\n        return new Promise(resolve => {\n            setTimeout(resolve, timeMs);\n        });\n    }\n\n    /**\n     * @static\n     * @param {String} cid Container id\n     * @return {Promise}\n     */\n    static stopContainer(cid) {\n        return runCommand(`docker stop ${ cid }`);\n    }\n\n    /**\n     * @static\n     * @param {String} cid Container id\n     * @return {Promise}\n     */\n    static removeContainer(cid) {\n        return runCommand(`docker rm ${ cid }`);\n    }\n}\n\nexport default Docker;\n"],"file":"docker.js"}