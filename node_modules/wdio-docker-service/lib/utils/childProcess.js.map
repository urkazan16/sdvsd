{"version":3,"sources":["../../src/utils/childProcess.js"],"names":["SPACE","runProcess","cmd","Promise","resolve","reject","commands","split","app","args","childProcess","on","err","process","nextTick","runCommand","stdio","code","Error"],"mappings":";;;;;;;;AAAA;;AAEA,MAAMA,KAAK,GAAG,GAAd;AAEA;;;;;;AAKO,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AAC5B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,QAAQ,GAAGJ,GAAG,CAACK,KAAJ,CAAUP,KAAV,CAAjB;AACA,UAAM,CAACQ,GAAD,EAAM,GAAGC,IAAT,IAAiBH,QAAvB;AACA,UAAMI,YAAY,GAAG,0BAAMF,GAAN,EAAWC,IAAX,CAArB;AAEAC,IAAAA,YAAY,CAACC,EAAb,CAAgB,OAAhB,EAA0BC,GAAD,IAAS;AAC9BP,MAAAA,MAAM,CAACO,GAAD,CAAN;AACH,KAFD;AAIAC,IAAAA,OAAO,CAACC,QAAR,CAAiB,MAAM;AACnBV,MAAAA,OAAO,CAACM,YAAD,CAAP;AACH,KAFD;AAGH,GAZM,CAAP;AAaH;AAED;;;;;;;AAKO,SAASK,UAAT,CAAoBb,GAApB,EAAyB;AAC5B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,QAAQ,GAAGJ,GAAG,CAACK,KAAJ,CAAUP,KAAV,CAAjB;AACA,UAAM,CAACQ,GAAD,EAAM,GAAGC,IAAT,IAAiBH,QAAvB;AACA,UAAMI,YAAY,GAAG,0BAAMF,GAAN,EAAWC,IAAX,EAAiB;AAAEO,MAAAA,KAAK,EAAE;AAAT,KAAjB,CAArB;AAEAN,IAAAA,YAAY,CAACC,EAAb,CAAgB,OAAhB,EAA0BC,GAAD,IAAS;AAC9BP,MAAAA,MAAM,CAACO,GAAD,CAAN;AACH,KAFD;AAIAF,IAAAA,YAAY,CAACC,EAAb,CAAgB,OAAhB,EAA0BM,IAAD,IAAU;AAC/B,UAAI,CAACA,IAAL,EAAW;AACPb,QAAAA,OAAO,CAACM,YAAD,CAAP;AACA;AACH;;AAEDL,MAAAA,MAAM,CAAC,IAAIa,KAAJ,CAAW,YAAYhB,GAAK,sBAAsBe,IAAM,EAAxD,CAAD,CAAN;AACH,KAPD;AAQH,GAjBM,CAAP;AAkBH","sourcesContent":["import { spawn } from 'child_process';\n\nconst SPACE = ' ';\n\n/**\n * Runs continuous shell process\n * @param {String} cmd Shell command\n * @return {Promise<process>}\n */\nexport function runProcess(cmd) {\n    return new Promise((resolve, reject) => {\n        const commands = cmd.split(SPACE);\n        const [app, ...args] = commands;\n        const childProcess = spawn(app, args);\n\n        childProcess.on('error', (err) => {\n            reject(err);\n        });\n\n        process.nextTick(() => {\n            resolve(childProcess);\n        });\n    });\n}\n\n/**\n * Runs shell command\n * @param {String} cmd Shell command\n * @return {Promise<process>}\n */\nexport function runCommand(cmd) {\n    return new Promise((resolve, reject) => {\n        const commands = cmd.split(SPACE);\n        const [app, ...args] = commands;\n        const childProcess = spawn(app, args, { stdio: 'ignore' });\n\n        childProcess.on('error', (err) => {\n            reject(err);\n        });\n\n        childProcess.on('close', (code) => {\n            if (!code) {\n                resolve(childProcess);\n                return;\n            }\n\n            reject(new Error(`Command '${ cmd }' exited with code ${ code }`));\n        });\n    });\n}\n"],"file":"childProcess.js"}