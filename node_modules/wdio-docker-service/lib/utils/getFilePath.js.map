{"version":3,"sources":["../../src/utils/getFilePath.js"],"names":["FILE_EXTENSION_REGEX","getFilePath","filePath","defaultFilename","absolutePath","path","resolve","test","basename","join"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,oBAAoB,GAAG,eAA7B;AAEA;;;;;;;AAMe,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,eAA/B,EAAgD;AAC3D,MAAIC,YAAY,GAAGC,cAAKC,OAAL,CAAaJ,QAAb,CAAnB,CAD2D,CAG3D;AACA;;;AACA,MAAI,CAACF,oBAAoB,CAACO,IAArB,CAA0BF,cAAKG,QAAL,CAAcJ,YAAd,CAA1B,CAAL,EAA6D;AACzDA,IAAAA,YAAY,GAAGC,cAAKI,IAAL,CAAUL,YAAV,EAAwBD,eAAxB,CAAf;AACH;;AAED,SAAOC,YAAP;AACH","sourcesContent":["import path from 'path';\n\nconst FILE_EXTENSION_REGEX = /\\.[0-9a-z]+$/i;\n\n/**\n * Resolves the given path into a absolute path and appends the default filename as fallback when the provided path is a directory.\n * @param  {String} filePath         relative file or directory path\n * @param  {String} defaultFilename default file name when filePath is a directory\n * @return {String}                 absolute file path\n */\nexport default function getFilePath(filePath, defaultFilename) {\n    let absolutePath = path.resolve(filePath);\n\n    // test if we already have a file (e.g. selenium.txt, .log, log.txt, etc.)\n    // NOTE: path.extname doesn\"t work to detect a file, cause dotfiles are reported by node to have no extension\n    if (!FILE_EXTENSION_REGEX.test(path.basename(absolutePath))) {\n        absolutePath = path.join(absolutePath, defaultFilename);\n    }\n\n    return absolutePath;\n}\n"],"file":"getFilePath.js"}